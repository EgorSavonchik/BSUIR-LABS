
-- Примеры записей для таблицы STUDENTS
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Иванов Иван', 4);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Петров Петр', 3);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Сидоров Сидор', 3);
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('Козлов Алексей', 4);

-- Примеры записей для таблицы GROUPS
INSERT INTO GROUPS (ID, NAME, C_VAL) VALUES (4, 'Группа 1', 2);
INSERT INTO GROUPS (NAME, C_VAL) VALUES ('Группа 2', 2);
INSERT INTO GROUPS (ID, NAME, C_VAL) VALUES (3, 'Группа 3', 0); -- Группа без студентов

SELECT * FROM GROUPS;
SELECT * FROM STUDENTS;
DELETE FROM GROUPS;
DELETE FROM STUDENTS;
DELETE FROM STUDENTS_LOG;
SELECT * FROM STUDENTS_LOG;

UPDATE students SET name = 'Новое имя' WHERE id = 2;
CREATE TABLE students_log (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR2(100) NOT NULL,
    date_of_action DATE NOT NULL,
    operation VARCHAR2(10) NOT NULL,
    stud_id NUMBER NOT NULL,
    stud_name VARCHAR2(100) NOT NULL,
    stud_group_id NUMBER NOT NULL
);

CREATE OR REPLACE TRIGGER Students_Logging
AFTER INSERT OR UPDATE OR DELETE ON STUDENTS
FOR EACH ROW
DECLARE
    v_username VARCHAR2(30) := USER;
    v_date DATE := SYSDATE;
    v_operation VARCHAR2(20);
BEGIN
    IF INSERTING THEN
        v_operation := 'INSERT';
        INSERT INTO STUDENTS_LOG (USERNAME, DATE_OF_ACTION, OPERATION, STUD_ID, STUD_NAME, STUD_GROUP_ID)
        VALUES (v_username, v_date, v_operation, :NEW.ID, :NEW.NAME, :NEW.GROUP_ID);
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
        INSERT INTO STUDENTS_LOG (USERNAME, DATE_OF_ACTION, OPERATION, STUD_ID, STUD_NAME, STUD_GROUP_ID)
        VALUES (v_username, v_date, v_operation, :NEW.ID, :NEW.NAME, :NEW.GROUP_ID);
    ELSIF DELETING THEN
        v_operation := 'DELETE';
        INSERT INTO STUDENTS_LOG (USERNAME, DATE_OF_ACTION, OPERATION, STUD_ID, STUD_NAME, STUD_GROUP_ID)
        VALUES (v_username, v_date, v_operation, :OLD.ID, :OLD.NAME, :OLD.GROUP_ID);
    END IF;
END;


CREATE OR REPLACE PROCEDURE Restore_Students_Info_By_Date (date_time IN TIMESTAMP)
AS
    cur_date TIMESTAMP := SYSDATE;
BEGIN
    DELETE FROM students;
    DELETE FROM students_log WHERE date_of_action >= cur_date;
    
    FOR stud IN (SELECT * FROM students_log WHERE date_of_action <= date_time ORDER BY date_of_action ASC) LOOP
        IF stud.operation = 'INSERT' THEN
            DBMS_OUTPUT.PUT_LINE('INSERT');
            INSERT INTO students (id, name, group_id) VALUES (stud.stud_id, stud.stud_name, stud.stud_group_id);
        ELSIF stud.operation = 'UPDATE' THEN
            UPDATE students SET group_id = stud.stud_group_id, name = stud.stud_name WHERE stud.stud_id = id;
             DBMS_OUTPUT.PUT_LINE('UPDATE');
        ELSIF stud.operation = 'DELETE' THEN
            DBMS_OUTPUT.PUT_LINE('DELETE');
            DELETE FROM students WHERE stud.stud_id = id;
        END IF;
    END LOOP;

    DELETE FROM students_log WHERE date_of_action >= cur_date;
END;


CREATE OR REPLACE PROCEDURE Restore_Students_Info_By_Offset (date_time IN INTERVAL DAY TO SECOND)
AS
    cur_date TIMESTAMP := SYSDATE;
BEGIN
    DELETE FROM students;
    DELETE FROM students_log WHERE date_of_action >= cur_date;
    DBMS_OUTPUT.PUT_LINE(cur_date - date_time);
    DBMS_OUTPUT.PUT_LINE(cur_date);
    FOR stud IN (SELECT * FROM students_log WHERE date_of_action <= cur_date - date_time ORDER BY date_of_action ASC) LOOP
        IF stud.operation = 'INSERT' THEN
            DBMS_OUTPUT.PUT_LINE('INSERT');
            INSERT INTO students (id, name, group_id) VALUES (stud.stud_id, stud.stud_name, stud.stud_group_id);
        ELSIF stud.operation = 'UPDATE' THEN
            UPDATE students SET group_id = stud.stud_group_id, name = stud.stud_name WHERE stud.stud_id = id;
             DBMS_OUTPUT.PUT_LINE('UPDATE');
        ELSIF stud.operation = 'DELETE' THEN
            DBMS_OUTPUT.PUT_LINE('DELETE');
            DELETE FROM students WHERE stud.stud_id = id;
        END IF;
    END LOOP;

    DELETE FROM students_log WHERE date_of_action >= cur_date;
END;


DELETE FROM STUDENTS_LOG WHERE ID = 76;
CALL Restore_Students_Info_By_Date('28.02.2024 15:10:00');
CALL Restore_Students_Info_By_Offset('0 00:00:01');

SELECT * FROM STUDENTS;
SELECT * FROM STUDENTS_LOG;
DELETE FROM STUDENTS WHERE ID = 4;
ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS.FF9';
ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI:SS';

CREATE OR REPLACE TRIGGER Group_C_Val_Students_Update
AFTER UPDATE ON STUDENTS
FOR EACH ROW
BEGIN
  IF (:OLD.GROUP_ID != :NEW.GROUP_ID) THEN
    UPDATE GROUPS SET c_val = c_val - 1 WHERE id = :OLD.GROUP_ID;
    UPDATE GROUPS SET c_val = c_val + 1 WHERE id = :NEW.GROUP_ID;
  END IF;
END;

CREATE OR REPLACE TRIGGER Group_C_Val_Students_Insert
AFTER INSERT ON STUDENTS
FOR EACH ROW
BEGIN
  UPDATE GROUPS SET c_val = c_val + 1 WHERE id = :NEW.GROUP_ID;
END;

CREATE OR REPLACE TRIGGER Group_C_Val_Students_Delete
BEFORE DELETE ON STUDENTS
FOR EACH ROW
BEGIN
    UPDATE GROUPS SET c_val = c_val - 1 WHERE id = :OLD.GROUP_ID;
END;

DELETE FROM GROUPS WHERE ID =3;
SELECT * FROM STUDENTS;
SELECT * FROM GROUPS;
SELeCT * FROM STUDENTS_LOG;
INSERT INTO STUDENTS(name, group_id) VALUES('qwe', 4);
UPDATE STUDENTS SET name = 'Ivan' WHERE id = 1; 


SELECT trigger_name, table_name, trigger_type
FROM all_triggers
WHERE triggering_event LIKE 'DELETE'
ORDER BY table_name, trigger_name;

DROP TRIGGER UPDATE_GROUP_STUDENT_COUNT;
